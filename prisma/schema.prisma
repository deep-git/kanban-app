// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String @id @default(uuid()) @map("_id")
  userId   String @unique
  name     String
  imageUrl String @db.String
  email    String @db.String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  boards    Boards[]
  columns   Columns[]
  tasks     Tasks[]
}

model Boards {
  id   String @id @default(uuid()) @map("_id")
  name String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  columns   Columns[]
  tasks     Tasks[]

  @@index([profileId])
}

model Columns {
  id    String @id @default(uuid()) @map("_id")
  name  String
  color String

  boardId String
  boards  Boards @relation(fields: [boardId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tasks     Tasks[]
  subtasks  Subtasks[]

  @@index([boardId])
  @@index([profileId])
}

model Tasks {
  id          String @id @default(uuid()) @map("_id")
  name        String
  description String @db.String
  status      String @db.String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  boardId String
  boards  Boards @relation(fields: [boardId], references: [id], onDelete: Cascade)

  columnId String
  columns  Columns @relation(fields: [boardId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  subtasks  Subtasks[]

  @@index([boardId])
  @@index([profileId])
  @@index([columnId])
}

model Subtasks {
  id        String  @id @default(uuid()) @map("_id")
  name      String
  completed Boolean

  taskId String
  tasks  Tasks  @relation(fields: [taskId], references: [id], onDelete: Cascade)

  columnId String
  columns  Columns @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([columnId])
}
